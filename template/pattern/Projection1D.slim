##
##  Copyright(c) 2010-2011 Laika, developed under contract by mitchpraterLLC.
##  All rights reserved unless otherwise granted. This program or documentation
##  contains proprietary, confidential information and trade secrets of Laika
##  and/or mitchpraterLLC. Use of copyright notice does not imply publication.
##  
##  By possessing this software, you agree to the following terms and conditions.
##  You may not resell this software, but you may freely distribute it to others.
##  You may use it for whatever purposes you wish. There are no warranties of any
##  kind. You may make modifications, however any derivation may only be distributed
##  to others under the same freedoms granted to you herein, it must retain this
##  notice and agreement, and the modifications noted. We also ask that you make
##  such modifications available to Laika, mitchpraterLLC, or to the computer
##  graphics community as a whole through a public forum.
##
slim 1 extensions mprater {
  extensions laika vfx {

    templateV float Projection1D 0 {
        description {
            Converts a point to a float by projecting the 3D space into
            one dimension.
        }

        parameter point Q {
            label {Input}
            description {
                The 3D manifold or point that will be projected into 1D.
            }
            detail varying
            default {0 0 0}
        }

        parameter float Type {
            label {Projection}
            description {
                Selects the 3D to 1D projection to use.
            }
            detail uniform
            subtype selector
            range {
                "X" 0
                "Y" 1
                "Z" 2
                "Length" 3
            }
            default 2
        }

        parameter float Invert {
            label {Invert}
            description {
                Invert (negate) the result.
            }
            detail uniform
            subtype switch
            default 0
        }

        parameter float result {
            display hidden
            access output
            default 0
        }

        RSLFunction {
            void vfxProjection1D (
                varying point   Q; 
                uniform float   Type;
                uniform float   Invert;

                output varying float    result;
            ) {
                if (Type == 0)
                    result = xcomp(Q);

                else if (Type == 1)
                    result = ycomp(Q);

                else if (Type == 2)
                    result = zcomp(Q);

                else if (Type == 3)
                    result = length (vector Q);

                if (Invert)
                    result = -result;
            }
        }
    }

  }
}
