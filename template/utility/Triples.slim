##
##  Copyright(c) 2010-2011 Laika, developed under contract by mitchpraterLLC.
##  All rights reserved unless otherwise granted. This program or documentation
##  contains proprietary, confidential information and trade secrets of Laika
##  and/or mitchpraterLLC. Use of copyright notice does not imply publication.
##  
##  By possessing this software, you agree to the following terms and conditions.
##  You may not resell this software, but you may freely distribute it to others.
##  You may use it for whatever purposes you wish. There are no warranties of any
##  kind. You may make modifications, however any derivation may only be distributed
##  to others under the same freedoms granted to you herein, it must retain this
##  notice and agreement, and the modifications noted. We also ask that you make
##  such modifications available to Laika, mitchpraterLLC, or to the computer
##  graphics community as a whole through a public forum.
##
slim 1 extensions mprater {
  extensions laika vfx {

    set TemplatePrototype {
    templateV multiple From%Name 0 {
        description {
            Outputs the X, Y, and Z components of the Input as floats.
        }

        parameter %Type Input {
            label {Input}
            description {
            }
            provider variable
            detail varying
            default {0 0 0}
        }

        parameter float X {
            label {x}
            display hidden
            access output
        }
        parameter float Y {
            label {y}
            display hidden
            access output
        }
        parameter float Z {
            label {z}
            display hidden
            access output
        }

        RSLFunction {
            void vfxFrom%Name (
                varying %Type   Input;

                output float    X;
                output float    Y;
                output float    Z;
            ) {
                X = xcomp(Input);
                Y = ycomp(Input);
                Z = zcomp(Input);
            }
        }
    }
    }

    #
    # Generate the various types of template.
    #
    foreach  {type name} {point Point vector Vector} {
        regsub -all %Type $TemplatePrototype $type result
        regsub -all %Name $result $name result
        if [catch $result msg] {
            ::RAT::LogMsg ERROR $msg
        }
    }


    set TemplatePrototype {
    templateV %Type To%Name 0 {
        description {
            Outputs the X, Y, and Z values as a %Name.
        }

        parameter float X {
            label {x}
            provider variable
            detail varying
            range {-1 1}
            default 0
        }
        parameter float Y {
            label {y}
            provider variable
            detail varying
            range {-1 1}
            default 0
        }
        parameter float Z {
            label {z}
            provider variable
            detail varying
            range {-1 1}
            default 0
        }

        parameter %Type Output {
            display hidden
            access output
        }

        RSLFunction {
            void vfxTo%Name (
                varying float   X;
                varying float   Y;
                varying float   Z;

                output varying %Type    Output;

            ) {
                Output = %Type (X, Y, Z);
            }
        }
    }
    }

    #
    # Generate the various types of template.
    #
    foreach  {type name} {point Point vector Vector} {
        regsub -all %Type $TemplatePrototype $type result
        regsub -all %Name $result $name result
        if [catch $result msg] {
            ::RAT::LogMsg ERROR $msg
        }
    }

  }
}
