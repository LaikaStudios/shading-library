##
##  Copyright(c) 2010-2011 Laika, developed under contract by mitchpraterLLC.
##  All rights reserved unless otherwise granted. This program or documentation
##  contains proprietary, confidential information and trade secrets of Laika
##  and/or mitchpraterLLC. Use of copyright notice does not imply publication.
##  
##  By possessing this software, you agree to the following terms and conditions.
##  You may not resell this software, but you may freely distribute it to others.
##  You may use it for whatever purposes you wish. There are no warranties of any
##  kind. You may make modifications, however any derivation may only be distributed
##  to others under the same freedoms granted to you herein, it must retain this
##  notice and agreement, and the modifications noted. We also ask that you make
##  such modifications available to Laika, mitchpraterLLC, or to the computer
##  graphics community as a whole through a public forum.
##
slim 1 extensions mprater {
  extensions laika vfx {

    templateV float FSmoothstep 0 {
        label {Smoothstep}
        description {
            Produces a smoothstep between the Min and Max values of the Input.
        }

        parameter float Input {
            label {Input}
            description {
                The function to be smoothstepped.
            }
            defaultinput 1
            provider variable
            detail varying
            subtype slider
            range {0 1}
            default .5
        }

        parameter float Min {
            label {Min}
            description {
                This value will become 0 in the result.
            }
            provider variable
            detail varying
            subtype slider
            range {0 1}
            default 0
        }

        parameter float Max {
            label {Max}
            description {
                This value will become 1 in the result.
            }
            provider variable
            detail varying
            subtype slider
            range {0 1}
            default 1
        }

        parameter float Invert {
			label {Invert}
			description {
				If checked, invert the result.
			}
			provider variable
            detail uniform
			subtype switch
			default 0
		}

        parameter float result {
            display hidden
            access output
        }


        RSLSource DynamicFunction {
            proc primvars {} {}
            proc function {} {
                generateBody {
output "
                    result = smoothstep ([getvar Min], [getvar Max], [getvar Input]);
                    if ([getvar Invert])
                        result = 1 - result;
"
                }
            }
        }
    }

    templateV color CSmoothstep 0 {
        label {Smoothstep}
        description {
            Produces a smoothstep between the Min and Max values of the Input.
        }

        parameter color Input {
            label {Input}
            description {
                The function to be smoothstepped.
            }
            defaultinput 1
            provider variable
            detail varying
            default {.5 .5 .5}
        }

        parameter color Min {
            label {Min}
            description {
                This value will become color 0 in the result.
            }
            provider variable
            detail varying
            default {0 0 0}
        }

        parameter color Max {
            label {Max}
            description {
                This value will become color 1 in the result.
            }
            provider variable
            detail varying
            default {1 1 1}
        }

        parameter float Invert {
			label {Invert}
			description {
				If checked, invert the result.
			}
			provider variable
            detail uniform
			subtype switch
			default 0
		}

        parameter color result {
            display hidden
            access output
        }


        RSLInclude {sl.h}

        RSLSource DynamicFunction {
            proc primvars {} {}
            proc function {} {
                generateBody {
output "
                    result = _smoothstep ([getvar Min], [getvar Max], [getvar Input]);

                    if ([getvar Invert])
                        result = color 1 - result;
"
                }
            }
        }
    }

  }
}
