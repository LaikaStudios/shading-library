##
##  Copyright(c) 2009-2015 Laika, developed under contract by mitchpraterLLC.
##  All rights reserved unless otherwise granted. This program or documentation
##  contains proprietary, confidential information and trade secrets of Laika
##  and/or mitchpraterLLC. Use of copyright notice does not imply publication.
##  
##  By possessing this software, you agree to the following terms and conditions.
##  You may not resell this software, but you may freely distribute it to others.
##  You may use it for whatever purposes you wish. There are no warranties of any
##  kind. You may make modifications, however any derivation may only be distributed
##  to others under the same freedoms granted to you herein, it must retain this
##  notice and agreement, and the modifications noted. We also ask that you make
##  such modifications available to Laika, mitchpraterLLC, or to the computer
##  graphics community as a whole through a public forum.
##

set rms_script_path [GetEnv RMS_SCRIPT_PATHS]
set template_path [file join [GetEnv RMS_SCRIPT_PATHS] template]
set command_path [file join [GetEnv RMS_SCRIPT_PATHS] command]

LoadExtension tcl [file join $command_path slim genTemplateDocs.tcl]

#
#   Commands and Scripts.
#
LoadExtension slim [file join $command_path slim ReloadAllTemplates.slim] slim
LoadExtension slim [file join $command_path slim MakeParamsInternal.slim] slim
LoadExtension slim [file join $command_path slim MakeParamsExternal.slim] slim

LoadExtension slim [file join $template_path script __categoryParam.slim] slim
LoadExtension slim [file join $template_path script ShaderEnable.slim] slim

#
#   Visualizers.
#
LoadExtension slim [file join $template_path visualizer rsl.slim] slim
LoadExtension slim [file join $template_path visualizer manifold.slim] slim
LoadExtension slim [file join $template_path visualizer ImplicitManifold.slim] slim

#
#   Custom UI's.
#
LoadExtension slim [file join $template_path ui BakeParam.slim] customui
LoadExtension slim [file join $template_path ui AddPrimAttrOpt.slim] customui
LoadExtension slim [file join $template_path ui AddParam.slim] customui
LoadExtension slim [file join $template_path ui AddSelector.slim] customui
LoadExtension slim [file join $template_path ui MultiplexParam.slim] customui
LoadExtension slim [file join $template_path ui SelectorUI.slim] customui
LoadExtension slim [file join $template_path ui listui.slim] customui
LoadExtension slim [file join $template_path ui listui2.slim] customui
LoadExtension slim [file join $template_path ui listui3.slim] customui
LoadExtension slim [file join $template_path ui HR.slim] customui

#
#   Implicit type conversions.
#
LoadExtension slim [file join $template_path convert ToColor.slim] slim
SetPref TypeConversionTemplate(point,color) laika,PointToColor
SetPref TypeConversionTemplate(vector,color) laika,VectorToColor
SetPref TypeConversionTemplate(normal,color) laika,NormalToColor
SetPref TypeConversionTemplate(manifold,color) laika,ManifoldToColor
SetPref TypeConversionTemplate(manifold_s,color) laika,Manifold_sToColor
SetPref TypeConversionTemplate(shadingmodel,color) laika,SMToColor

LoadExtension slim [file join $template_path convert ToPoint.slim] slim
SetPref TypeConversionTemplate(color,point) laika,ColorToPoint
SetPref TypeConversionTemplate(vector,point) laika,VectorToPoint
SetPref TypeConversionTemplate(normal,point) laika,NormalToPoint
SetPref TypeConversionTemplate(manifold,point) laika,ManifoldToPoint
SetPref TypeConversionTemplate(manifold_s,point) laika,Manifold_sToPoint

LoadExtension slim [file join $template_path convert ToVector.slim] slim
SetPref TypeConversionTemplate(color,vector) laika,ColorToVector
SetPref TypeConversionTemplate(point,vector) laika,PointToVector
SetPref TypeConversionTemplate(normal,vector) laika,NormalToVector
SetPref TypeConversionTemplate(manifold,vector) laika,ManifoldToVector
SetPref TypeConversionTemplate(manifold_s,vector) laika,Manifold_sToVector

LoadExtension slim [file join $template_path convert ToNormal.slim] slim
SetPref TypeConversionTemplate(color,normal) laika,ColorToNormal
SetPref TypeConversionTemplate(point,normal) laika,PointToNormal
SetPref TypeConversionTemplate(vector,normal) laika,VectorToNormal
SetPref TypeConversionTemplate(manifold,normal) laika,ManifoldToNormal
SetPref TypeConversionTemplate(manifold_s,normal) laika,Manifold_sToNormal

LoadExtension slim [file join $template_path convert ToManifold.slim] slim
SetPref TypeConversionTemplate(manifold,manifold_s) laika,ManifoldToManifold_s
SetPref TypeConversionTemplate(manifold_s,manifold) laika,Manifold_sToManifold
SetPref TypeConversionTemplate(ImplicitSurfaceManifold_s,manifold_s) laika,ImplicitSurfaceManifoldToManifold_s
SetPref TypeConversionTemplate(ImplicitSurfaceManifold_s,manifold) laika,ImplicitSurfaceManifoldToManifold
SetPref TypeConversionTemplate(ImplicitManifold_s,manifold_s) laika,ImplicitManifoldToManifold_s
SetPref TypeConversionTemplate(ImplicitManifold_s,manifold) laika,ImplicitManifoldToManifold
SetPref TypeConversionTemplate(FlowManifold_s,manifold_s) laika,FlowManifoldToManifold_s
SetPref TypeConversionTemplate(FlowManifold_s,manifold) laika,FlowManifoldToManifold
SetPref TypeConversionTemplate(FractalizerManifold_s,manifold_s) laika,FractalizerManifoldToManifold_s
SetPref TypeConversionTemplate(FractalizerManifold_s,manifold) laika,FractalizerManifoldToManifold
SetPref TypeConversionTemplate(color,manifold) laika,ColorToManifold
SetPref TypeConversionTemplate(point,manifold) laika,PointToManifold
SetPref TypeConversionTemplate(vector,manifold) laika,VectorToManifold
SetPref TypeConversionTemplate(normal,manifold) laika,NormalToManifold
SetPref TypeConversionTemplate(color,manifold_s) laika,ColorToManifold_s
SetPref TypeConversionTemplate(point,manifold_s) laika,PointToManifold_s
SetPref TypeConversionTemplate(vector,manifold_s) laika,VectorToManifold_s
SetPref TypeConversionTemplate(normal,manifold_s) laika,NormalToManifold_s

LoadExtension slim [file join $template_path convert FromRGBA.slim] slim
SetPref TypeConversionTemplate(rgba_s,color) laika,RGBAToColor
SetPref TypeConversionTemplate(rgba_s,float) laika,RGBAToFloat

SetPref TypeConversionTemplate(bxdfV6Fresnel_s,color) laika,FresnelToColor
# Slim multiple output visualization conversions.
LoadExtension slim [file join $template_path convert ToSM.slim] slim
SetPref TypeConversionTemplate(string,shadingmodel) {laika,StringToSM hidden}
SetPref TypeConversionTemplate(matrix,shadingmodel) {laika,MatrixToSM hidden}

#
#   Template Search Paths.
#
set templatesearchpaths [list $rms_script_path $template_path $templates]

LogMsg INFO "Templates loading from:"
foreach fileName $templatesearchpaths {
    LogMsg INFO "    $fileName"
}

SetPref TemplateSearchPaths $templatesearchpaths


#
#   Struct and Common Template Type Definitions.
#
set StructList {
    include/rgba.slim {
        { laika,rgba#0 rgba_s rgba {laika struct} }
    }
    include/manifold.slim {
        { laika,manifold#0 manifold_s manifold {laika struct} }
    }
    include/AOV.slim {
        { laika,AOV#1 AOV_s AOV {laika} }
        { laika,csAOVparam#0 csAOV_s AOV {laika} }
    }
}

#
#   Templates.
#
set TemplateList "
    utility/AOV.slim {
        { laika,csAOV#2  coshader  AOV  {laika multiple float color point vector normal utility} }
    }
    utility/Triples.slim {
        { laika,FromPoint#0 multiple DeconstructPoint {laika multiple float point utility} }
        { laika,ToPoint#0 point ConstructPoint {laika utility} }
        { laika,FromVector#0 multiple DeconstructVector {laika multiple float vector utility} }
        { laika,ToVector#0 vector ConstructVector {laika utility} }
    }
    utility/Color.slim {
        { laika,FromColor#0     multiple    DeconstructColor    {laika multiple float color utility} }
        { laika,ToColor#0       color       ConstructColor      {laika utility} }
        { laika,XformColor#0    {inputs {color} outputs {color float float float}}  Transform  {laika multiple color float utility} }
        { laika,ColorCorrect#0  {inputs {color} outputs {color color}}  ColorCorrect  {laika multiple color utility} }
    }
    utility/ColorReplace.slim {
        { laika,ColorReplace#0  color  ColorReplace  {laika color utility} }
    }
    utility/Expand.slim {
        { laika,floatExpand#0   {inputs {float} outputs {float}}   Expand  {laika utility} }
        { laika,colorExpand#0   {inputs {color} outputs {color}}   Expand  {laika utility} }
        { laika,pointExpand#0   {inputs {point} outputs {point}}   Expand  {laika utility} }
        { laika,vectorExpand#0  {inputs {vector} outputs {vector}}  Expand  {laika utility} }
    }
    utility/Fit.slim {
        { laika,floatFit#0   {inputs {float} outputs {float}}   Fit  {laika utility} }
        { laika,colorFit#0   {inputs {color} outputs {color}}   Fit  {laika utility} }
        { laika,pointFit#0   {inputs {point} outputs {point}}   Fit  {laika utility} }
        { laika,vectorFit#0  {inputs {vector} outputs {vector}}  Fit  {laika utility} }
    }
    utility/Modulate.slim {
        { laika,floatModulate#0   {inputs {float} outputs {float}}   Modulate  {laika utility} }
        { laika,colorModulate#0   {inputs {color} outputs {color}}   Modulate  {laika utility} }
        { laika,pointModulate#0   {inputs {point} outputs {point}}   Modulate  {laika utility} }
        { laika,vectorModulate#0  {inputs {vector} outputs {vector}}  Modulate  {laika utility} }
    }
    utility/Xform.slim {
        { laika,pointXform#0  point  Transform  {laika point manifold utility} }
        { laika,vectorXform#0 vector Transform  {laika utility} }
        { laika,normalXform#0 normal Transform  {laika utility} }
        { laika,vectorScale#0 vector Scale  {laika utility} }
    }
    utility/Manifold.slim {
        { laika,FromManifold#0 multiple DeconstructManifold {laika multiple manifold point vector utility} }
        { laika,ToManifoldN#0 manifoldn ConstructManifoldN {laika manifold point vector utility} }
    }
    utility/Shared.slim {
        { laika,Float#1 multiple Float {laika multiple float color point vector normal utility} }
        { laika,Color#1 multiple Color {laika multiple float color point vector normal utility} }
        { laika,Point#2 multiple Point {laika multiple color point vector normal utility} }
        { laika,Vector#2 multiple Vector {laika multiple color point vector normal utility} }
        { laika,Normal#2 multiple Normal {laika multiple color point vector normal utility} }
    }
    utility/String.slim {
        { laika,String#0 string String {laika string utility} }
        { laika,Concat#1 string Concat {laika string utility} }
        { laika,Format#0 string Format {laika string utility} }
        { laika,PassFilename#0 string PassFileName {laika string utility} }
        { laika,PassInfo#0 multiple PassInfo {laika string utility multiple} }
    }
    utility/StringSLBox.slim {
        { laika,S_SLBox#0 string SLBox {laika string utility} }
    }
    utility/sl.slim {
        { laika,PrimAttrOpt#0   multiple    PrimAttrOpt     {laika multiple float color point vector normal string matrix utility} }
        { laika,N#0             multiple    N               {laika multiple vector normal utility} }
        { laika,Ng#0            vector      Ng              {laika vector} }
        { laika,ShadingNormal#0 vector      ShadingNormal   {laika vector} }
        { laika,Twosided#0      float       PRManTwosided       {laika float utility} }
        { laika,Doubleshaded#0  float       PRManDoubleshaded   {laika float utility} }
        { laika,prmanOrientation#0  float   PRManOrientation    {laika float utility} }
        { laika,prmanFace#0     float       PRManFace       {laika float utility} }
        { laika,prmanSide#0     float       PRManSide       {laika float utility} }
        { laika,prmanOutside#0  float       PRManOutside    {laika float utility} }
        { laika,ScreenVelocity#0    color   ScreenVelocity  {laika color pattern utility} }
        { laika,MatrixSpace#0   matrix      MatrixSpace     {laika matrix} }
        { laika,MatrixShader#0  matrix      MatrixShader    {laika matrix} }
        { laika,MatrixWorld#0   matrix      MatrixWorld     {laika matrix} }
        { laika,MatrixObject#0  matrix      MatrixObject    {laika matrix} }
    }
    utility/Floats.slim {
        { laika,Floats#0 multiple PRManFloats {laika multiple float utility} }
    }
    utility/Vectors.slim {
        { laika,Vectors#0 multiple PRManVectors {laika multiple vector utility} }
    }


    bake/Bake.slim {
        { laika,Bake#1 multiple Bake {laika multiple float color point vector normal utility} }
    }
    bake/RenderRadiosity.slim {
        { laika,RenderRadiosity#1  multiple  RenderRadiosity {laika multiple float color utility} }
    }
    bake/SSDiffuse.slim {
        { laika,SSDiffuse#1  color  SSDiffuse {laika utility} }
    }
    bake/BakeObj.slim {
        { laika,BakeObj#0  coshader  BakeObj {laika coshader} }
    }


    bxdfV7/Fresnel.slim {
        { laika,bxdfV7FresnelStd#1  coreV7fresnel_s  Fresnel  {laika} }
        { laika,bxdfV7FresnelSchlick#0  coreV7fresnel_s  FresnelSchlick  {laika} }
        { laika,bxdfV7FresnelMix#0  coreV7fresnel_s  FresnelMix  {laika} }
        { laika,bxdfV7FresnelKrKt#0  coreV7fresnel_s  FresnelKrKt  {laika} }
        { laika,bxdfV7FresnelMinMax#1  coreV7fresnel_s  FresnelMinMax  {laika} }
        { laika,bxdfV7FresnelShininess#1  coreV7fresnel_s  FresnelShininess  {laika} }
        { laika,bxdfV7TranslucenceFresnel#0  coreV7fresnel_s  TranslucenceFresnel  {laika} }
    }
    convert/FromFresnel.slim {
        { laika,coreV7fresnelToColor#0  multiple  FresnelToColor  {laika multiple utility} }
    }
    bxdfV7/Blend.slim {
        { laika,bxdfV7BlendMix#0  coreV7blend_s  BlendMix  {laika} }
        { laika,bxdfV7BlendKrKt#0  coreV7blend_s  BlendKrKt  {laika} }
    }
    bxdfV7/Shadow.slim {
        { laika,bxdfV7ShadowColor#0  coreV7shadow_s  ShadowColor  {laika} }
        { laika,bxdfV7ShadowCenterEdge#0  coreV7shadow_s  ShadowCenterEdge  {laika} }
    }


    bxdfV7/Material.slim {
        { laika,bxdfV7Material#0 material Material {laika} }
    }

    bxdfV7/AS.slim {
        { laika,bxdfV7AS#0 bxdfV7AS_s AS {laika bxdf} }
    }
    bxdfV7/Backlit.slim {
        { laika,bxdfV7Backlit#0 bxdfV7Backlit_s Backlit {laika bxdf} }
    }
    bxdfV7/Constant.slim {
        { laika,bxdfV7Constant#0 bxdfV7Constant_s Constant {laika bxdf} }
    }
    bxdfV7/Fuzz.slim {
        { laika,bxdfV7Fuzz#0 bxdfV7Fuzz_s Fuzz {laika bxdf} }
    }
    bxdfV7/GCL.slim {
        { laika,bxdfV7GCLSpec#0 bxdfV7GCL_s GCLSpec {laika bxdf} }
        { laika,bxdfV7GCLDiff#0 bxdfV7GCL_s GCLDiff {laika bxdf} }
    }
    bxdfV7/Ghost.slim {
        { laika,bxdfV7Ghost#0 bxdfV7Ghost_s Ghost {laika bxdf} }
    }
    bxdfV7/HairDiffuse.slim {
        { laika,bxdfV7HairDiffuse#0 bxdfV7HairDiffuse_s HairDiffuse {laika bxdf} }
    }
    bxdfV7/HairSpecular.slim {
        { laika,bxdfV7HairSpecular#0 bxdfV7HairSpecular_s HairSpecular {laika bxdf} }
    }
    bxdfV7/HG.slim {
        { laika,bxdfV7HG#0 bxdfV7HG_s HG {laika bxdf} }
    }
    bxdfV7/Lambert.slim {
        { laika,bxdfV7Lambert#0 bxdfV7Lambert_s Lambert {laika bxdf} }
    }
    bxdfV7/Radiance.slim {
        { laika,bxdfV7Radiance#0 bxdfV7Radiance_s Radiance {laika bxdf} }
    }
    bxdfV7/Refraction.slim {
        { laika,bxdfV7Refraction#0 bxdfV7Refraction_s Refraction {laika bxdf} }
    }
    bxdfV7/Scatter.slim {
        { laika,bxdfV7Scatter#0 bxdfV7Scatter_s Scatter {laika bxdf} }
    }
    bxdfV7/Subsurface.slim {
        { laika,bxdfV7Subsurface#0 bxdfV7Subsurface_s Subsurface {laika bxdf} }
    }
    bxdfV7/Translucence.slim {
        { laika,bxdfV7Translucence#0 bxdfV7Translucence_s Translucence {laika bxdf} }
    }
    bxdfV7/Velvet.slim {
        { laika,bxdfV7Velvet#0 bxdfV7Velvet_s Velvet {laika bxdf} }
    }


    combiner/Blend.slim {
        { laika,floatBlend#0  float  Blend {laika utility} }
        { laika,colorBlend#0  color  Blend {laika utility} }
        { laika,pointBlend#0  point  Blend {laika utility} }
        { laika,vectorBlend#0 vector Blend {laika utility} }
        { laika,normalBlend#0 normal Blend {laika utility} }
    }
    combiner/Combine.slim {
        { laika,floatCombine#1  float   Combine {laika utility} }
        { laika,colorCombine#1  color   Combine {laika utility} }
        { laika,pointCombine#1  point   Combine {laika utility} }
        { laika,vectorCombine#1 vector  Combine {laika utility} }
    }
    combiner/Selector.slim {
        { laika,FSelector#2     float   Selector    {laika utility} }
        { laika,CSelector#2     color   Selector    {laika utility} }
        { laika,PSelector#2     point   Selector    {laika utility} }
        { laika,VSelector#2     vector  Selector    {laika utility} }
        { laika,SSelector#2     string  Selector    {laika utility} }
        { laika,FresnelSelector#0  coreV7fresnel_s  FresnelSelector  {laika utility} }
        { laika,BlendSelector#0  coreV7blend_s  BlendSelector  {laika utility} }
        { laika,SCSelector#0  shadingcomponent  Selector  {laika utility} }
    }
    combiner/SelectorNumeric.slim {
        { laika,floatSelectorNumeric#0     float   SelectorNumeric   {laika utility} }
        { laika,colorSelectorNumeric#0     color   SelectorNumeric   {laika utility} }
        { laika,pointSelectorNumeric#0     point   SelectorNumeric   {laika utility} }
        { laika,vectorSelectorNumeric#0    vector  SelectorNumeric   {laika utility} }
        { laika,stringSelectorNumeric#0    string  SelectorNumeric   {laika utility} }
    }
    combiner/Multiplex.slim {
        { laika,Multiplex#0     multiple    Multiplex   {laika multiple float color point vector utility} }
    }


    displacement/BumpDisp.slim {
        { laika,bumpdispBumpDisp#2  bumpdisp_s   BumpDisp {laika displace } }
        { laika,multipleBumpDisp#1  multiple     BumpDisp {laika displace multiple point vector manifold manifoldn bumpdisp } }
        { laika,displaceBumpDisp#1  displacement BumpDisp {laika displace} }
        { laika,coshaderBumpDisp#1  coshader     BumpDisp {laika displace} }
    }

    effectorV7/ColorCorrect.slim {
        {laika,meV7ColorCorrect#0 materialeffector ColorCorrect {laika}}
    }
    effectorV7/DeathRay.slim {
        {laika,meV7DeathRay#0 materialeffector DeathRay {laika}}
    }
    effectorV7/ColorSocket.slim {
        {laika,meV7ColorSocket#0 multiple ColorSocket {laika materialeffector}}
    }
    effectorV7/Color.slim {
        {laika,meV7Color#0 materialeffector Color {laika}}
    }
    effectorV7/BumpDispSocket.slim {
        { laika,meV7BumpDispSocket#0 multiple BumpDispSocket {laika materialeffector} }
    }
    effectorV7/BumpDisp.slim {
        { laika,meV7BumpDisp#0 materialeffector BumpDisp {laika} }
    }
    effectorV7/Bump.slim {
        { laika,meV7Bump#0 materialeffector Bump {laika} }
    }
    effectorV7/Disp.slim {
        { laika,meV7Disp#0 materialeffector Disp {laika} }
    }

    effectorV7/Connection.slim {
        { laika,floatKatanaInput#0    float     FloatInput    {laika override} }
        { laika,colorKatanaInput#0    color     ColorInput    {laika override} }
        { laika,pointKatanaInput#0    point     PointInput    {laika override} }
        { laika,vectorKatanaInput#0   vector    VectorInput   {laika override} }
        { laika,stringKatanaInput#0   string    StringInput   {laika override} }
        { laika,manifold_sKatanaInput#0   manifold_s    ManifoldInput   {laika override} }
        { laika,floatKatanaOutput#0   coshader  FloatOutput   {laika override} }
        { laika,colorKatanaOutput#0   coshader  ColorOutput   {laika override} }
        { laika,pointKatanaOutput#0   coshader  PointOutput   {laika override} }
        { laika,vectorKatanaOutput#0  coshader  VectorOutput  {laika override} }
        { laika,stringKatanaOutput#0  coshader  StringOutput  {laika override} }
        { laika,manifold_sKatanaOutput#0  coshader  ManifoldOutput  {laika override} }
    }

    effectorV7/OrthoCard.slim {
        { laika,leV7OrthoCard#0  lighteffector  OrthoCard  {laika} }
    }
    effectorV7/Cube.slim {
        { laika,leV7Cube#0  lighteffector  Cube  {laika} }
    }
    effectorV7/CutOnOff.slim {
        { laika,leV7CutOnOff#0  lighteffector  CutOnOff  {laika} }
    }
    effectorV7/ExponFalloff.slim {
        { laika,leV7ExponFalloff#0  lighteffector  ExponFalloff  {laika} }
    }
    effectorV7/Sausage.slim {
        { laika,leV7Sausage#0  lighteffector  Sausage  {laika} }
    }
    effectorV7/Smoothstep.slim {
        { laika,leV7Smoothstep#0  lighteffector  Smoothstep  {laika} }
    }
    effectorV7/Sphere.slim {
        { laika,leV7Sphere#0  lighteffector  Sphere  {laika} }
    }
    effectorV7/Tint.slim {
        { laika,leV7Tint#0  lighteffector  Tint  {laika} }
    }

    effectorV7/Gobo.slim {
        { laika,gleV7Gobo#0  geolighteffector  Gobo  {laika} }
    }
    effectorV7/Portal.slim {
        { laika,gleV7Portal#0  geolighteffector  Portal  {laika} }
    }
    effectorV7/Region.slim {
        { laika,gleV7Region#0  geolighteffector  Region  {laika} }
    }


    light/Area.slim {
        {laika,ikaV7Area#0  light  Area  {laika}}
    }
    light/Env.slim {
        {laika,ikaV7Env#0  light  Env  {laika}}
    }
    light/GeoArea.slim {
        {laika,GeoArea#1  arealight  GeoArea  {laika}}
    }
    light/GeoEnv.slim {
        {laika,GeoEnv#1  arealight  GeoEnv  {laika}}
    }
    light/GeoMaterial.slim {
        {laika,GeoMaterial#0  arealight  GeoMaterial  {laika}}
    }


    mapper/MayaPlacement.slim {
        {laika,MayaPlace3D#0 manifold {MayaPlace3D} {laika}}
    }
    mapper/P.slim {
        {laika,P#0          multiple    P  {laika point manifold point multiple}}
        {laika,Pcurrent#2   manifold_s  P_current   {laika point manifold}}
        {laika,Pworld#2     manifold_s  P_world     {laika point manifold}}
        {laika,Pshader#2    manifold_s  P_shader    {laika point manifold}}
        {laika,Pobject#2    manifold_s  P_object    {laika point manifold}}
        {laika,Pcamera#2    manifold_s  P_camera    {laika point manifold}}
        {laika,Pscreen#2    manifold_s  P_screen    {laika point manifold}}
        {laika,Praster#2    manifold_s  P_raster    {laika point manifold}}
        {laika,PNDC#2       manifold_s  P_NDC       {laika point manifold}}
    }
    mapper/Ref.slim {
        { laika,Pref#1 manifold_s Pref {laika point manifold} }
        { laika,Nref#1 vector Nref {laika vector manifold} }
    }
    mapper/Pmatrix.slim {
        { laika,Pmatrix#0 manifold Pmatrix {laika matrix manifold} }
    }
    mapper/ImplicitSpaceManifold.slim {
        {laika,ImplicitSpaceManifold#0 ImplicitManifold_s ImplicitSpaceManifold {laika manifold}}
    }
    mapper/ImplicitPrefManifold.slim {
        {laika,ImplicitPrefManifold#0 ImplicitManifold_s ImplicitPrefManifold {laika manifold}}
    }
    mapper/FlowManifold.slim {
        {laika,FlowManifold#0 FlowManifold_s FlowManifold {laika manifold}}
    }
    mapper/FractalizerManifold.slim {
        {laika,FractalizerManifold#0 FractalizerManifold_s FractalizerManifold {laika manifold}}
    }
    mapper/MayaCamera.slim {
        {laika,MayaCamera#0 manifold_s MayaCamera {laika manifold}}
    }
    mapper/ShadowProjection.slim {
        {laika,ShadowProjection#0 manifold_s ShadowProjection {laika manifold}}
    }
    mapper/Turbulence.slim {
        {laika,Turbulence#1 multiple Turbulence {laika multiple manifold vector}}
    }
    mapper/UV.slim {
        {laika,UV#0 manifold_s UV {laika manifold}}
    }
    mapper/Xform.slim {
        { laika,Shuffle#0   point       Shuffle     {laika manifold utility} }
        { laika,Scale#2     point       Scale       {laika utility} }
        { laika,MScale#2    manifold    Scale       {laika utility} }
        { laika,Translate#2 point       Translate   {laika manifold utility} }
        { laika,Shear#0     manifold_s  Shear       {laika manifold utility} }
    }


    math/Mix.slim {
        {laika,FMix#0   {inputs {float} outputs {float}}  {Mix}  {laika float utility}}
        {laika,CMix#0   color   {Mix}           {laika color utility}}
        {laika,CCMix#0  color   {Mix Color}     {laika color utility}}
        {laika,SCMix#0  shadingcomponent    {Mix}   {laika shadingcomponent}}
        {laika,PMix#1   point   {Mix}           {laika point utility}}
        {laika,PPMix#1  point   {Mix Point}     {laika point utility}}
        {laika,VMix#1   vector  {Mix}           {laika vector utility}}
        {laika,VVMix#1  vector  {Mix Vector}    {laika vector utility}}
        {laika,MMix#1   manifold {Mix}          {laika manifold utility}}
        {laika,MMMix#1  manifold {Mix Manifold} {laika manifold utility}}
    }
    math/Linear.slim {
        { laika,floatLinear#0  {inputs {float} outputs {float}}  Linear {laika utility }}
        { laika,colorLinear#0  {inputs {color} outputs {color}}  Linear {laika utility }}
        { laika,pointLinear#0  {inputs {point} outputs {point}}  Linear {laika utility }}
        { laika,vectorLinear#0 {inputs {vector} outputs {vector}} Linear {laika utility }}
    }
    math/Exposure.slim {
        {laika,Exposure#1  float  ExposureIntensity  {laika utility}}
    }
    math/Functions.slim {
        {laika,FFunctions#0 {inputs {float} outputs {float}}   Functions   {laika utility}}
        {laika,CFunctions#0 {inputs {color} outputs {color}}   Functions   {laika utility}}
        {laika,floatAdd#0      float  Add      {laika utility}}
        {laika,floatMin#0      float  Min      {laika utility}}
        {laika,floatMax#0      float  Max      {laika utility}}
        {laika,floatAverage#0  float  Average  {laika utility}}
        {laika,floatGeoMean#0  float  Mean     {laika utility}}
        {laika,floatMultiply#0 float  Multiply {laika utility}}
    }
    math/Vector.slim {
        {laika,Faceforward#0    vector  Faceforward     {laika utility}}
        {laika,Normalize#0      vector  Normalize       {laika utility} }
        {laika,CrossProduct#0   vector  CrossProduct    {laika utility}}
        {laika,DotProduct#0     float   DotProduct      {laika utility vector}}
        {laika,CalculateNormal#0    vector  CalculateNormal {laika utility}}
        {laika,UVTangent#0      vector  UVTangent       {laika}}
        {laika,VolumeNormal#0   vector  VolumeNormal    {laika}}
        {laika,DensityGradient#0    vector  DensityGradient {laika}}
    }
    math/Step.slim {
        {laika,floatStep#0  {inputs {float} outputs {float}}  {Step} {laika utility}}
        {laika,colorStep#0  {inputs {color} outputs {color}}  {Step} {laika utility}}
        {laika,pointStep#0  {inputs {point} outputs {point}}  {Step} {laika utility}}
        {laika,vectorStep#0 {inputs {vector} outputs {vector}} {Step} {laika utility}}
    }
    math/Smoothstep.slim {
        {laika,FSmoothstep#0 {inputs {float} outputs {float}} {Smoothstep} {laika utility}}
        {laika,CSmoothstep#0 {inputs {color} outputs {color}} {Smoothstep} {laika utility}}
    }
    math/dV.slim {
        {laika,dV#0 float {dV} {laika float pattern}}
    }


    pattern/Cloth.slim {
        { laika,Cloth#0  multiple  Cloth  {laika multiple float pattern} }
    }
    pattern/Texture.slim {
        { laika,floatTexture#1  multiple  TextureFloat  {laika multiple float map} }
        { laika,colorTexture#1  multiple  TextureColor  {laika multiple float color map} }
        { laika,vectorTexture#1 multiple  TextureVector {laika multiple float vector map} }
        { laika,normalmapTexture#1 vector TextureNormalMap {laika displace vector map} }
    }
    pattern/Bomber.slim {
        { laika,colorBomber#0  multiple  Bomber  {laika multiple float color pattern} }
    }
    pattern/Curvature.slim {
        {laika,Curvature#1 float Curvature {laika pattern}}
    }
    pattern/EdgeRegion.slim {
        {laika,EdgeRegion#0 float EdgeRegion {laika pattern}}
    }
    pattern/Flow.slim {
        {laika,floatFlow#0  float  Flow {laika pattern}}
        {laika,colorFlow#0  color  Flow {laika pattern}}
        {laika,pointFlow#0  point  Flow {laika pattern}}
        {laika,vectorFlow#0 vector Flow {laika pattern}}
    }
    pattern/Fractal.slim {
        {laika,floatFractal#1  float  Fractal {laika pattern}}
        {laika,colorFractal#1  color  Fractal {laika pattern}}
        {laika,pointFractal#1  point  Fractal {laika pattern}}
        {laika,vectorFractal#1 vector Fractal {laika pattern}}
    }
    pattern/Fractalizer.slim {
        {laika,floatFractalizer#1 float Fractalizer {laika pattern}}
        {laika,colorFractalizer#1 color Fractalizer {laika pattern}}
        {laika,pointFractalizer#1 point Fractalizer {laika pattern}}
        {laika,vectorFractalizer#1 vector Fractalizer {laika pattern}}
    }
    pattern/FuzzOcclusion.slim {
        { laika,FuzzOcclusion#0 float FuzzOcclusion {laika pattern}}
    }
    pattern/HerringWorley.slim {
        {laika,HerringWorley#0  multiple  HerringWorley  {laika multiple float color manifold pattern}}
    }
    pattern/ImplicitSurface.slim {
        {laika,ImplicitSurface#3 multiple ImplicitSurface {laika multiple displace}}
    }
    pattern/Lattice.slim {
        {laika,Lattice#0 float Lattice {laika pattern}}
    }
    pattern/Noise.slim {
        {laika,floatNoise#0  float  Noise {laika pattern}}
        {laika,colorNoise#0  color  Noise {laika pattern}}
        {laika,pointNoise#0  point  Noise {laika pattern}}
        {laika,vectorNoise#0 vector Noise {laika pattern}}
        {laika,normalNoise#0 normal Noise {laika pattern}}
    }
    pattern/Occlusion.slim {
        {laika,Occlusion#11 multiple Occlusion {laika multiple color vector pattern}}
    }
    pattern/PatternedRamp.slim {
        {laika,floatPatternedRamp#0  multiple  PatternedRamp  {laika multiple float pattern}}
        {laika,floatPatternedInOutRamp#0  multiple  PatternedInOutRamp  {laika multiple float pattern}}
    }
    pattern/Projection1D.slim {
        {laika,Projection1D#0 float Projection1D {laika pattern manifold}}
    }
    pattern/RampPattern.slim {
        {laika,floatRampPattern#0  multiple  RampPattern  {laika multiple float pattern}}
    }
    pattern/VolumeField.slim {
        {laika,VolumeField#0 float VolumeField {laika pattern}}
    }
    pattern/Worley.slim {
        {laika,Worley#1  multiple  Worley  {laika multiple float color manifold pattern}}
    }


    volume/Air.slim {
        {laika,Air#0 volume Air {laika}}
    }
    volume/HenyeyGreenstein.slim {
        { laika,HenyeyGreenstein#2 volumematerial HenyeyGreenstein {laika} }
    }
    volume/Volume.slim {
        { laika,Volume#0 volumematerial Volume {laika} }
    }
    volume/BumpDisp.slim {
        { laika,volumeBD#0 volumeBD_s BumpDisp {laika displace } }
    }
"

::Slim::RegisterLazyTemplates [concat $StructList $TemplateList]
